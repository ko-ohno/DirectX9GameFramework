/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[Camera.cpp] カメラクラス
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：カメラクラス
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../StdAfx.h"
#include "Camera.h"
#include "../DX9Graphics.h"
#include "../../Math/Math.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
Camera::Camera(void)
	: aspect_size_(Vector2())
{
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
Camera::~Camera(void)
{
}

/*-----------------------------------------------------------------------------
/* ファクトリメソッド
-----------------------------------------------------------------------------*/
Camera* Camera::Create(void)
{
	return NEW Camera();
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool Camera::Init(void)
{
	D3DXVECTOR3 eye		= D3DXVECTOR3(0.0f, 0.0f, -10.0f)
			  , lookat	= D3DXVECTOR3(0.0f, 0.0f,  0.0f)
			  , up		= D3DXVECTOR3(0.0f, 1.0f,  0.0f);



	// カメラ変換行列作成
	D3DXMatrixLookAtLH(&view_matrix_
					  , &eye	 	// 視点
					  , &lookat	// 注視点
					  , &up);// 上向き	


	// プロジェクション変換行列作成
	D3DXMatrixPerspectiveFovLH(&projection_matrix_
							   , D3DX_PI / 3											// 視野角
							   , static_cast<FLOAT>(aspect_size_.x_) / aspect_size_.y_	// アスペクト比
							   , static_cast<FLOAT>(1.f)							    // ニアプレーン
							   , static_cast<FLOAT>(1000.f));						    // ファープレーン

	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void Camera::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* 入力処理
-----------------------------------------------------------------------------*/
void Camera::Input(void)
{
}

/*-----------------------------------------------------------------------------
/* 更新処理
-----------------------------------------------------------------------------*/
void Camera::Update(float deltaTime)
{
}

/*-----------------------------------------------------------------------------
/* 描画処理
-----------------------------------------------------------------------------*/
void Camera::Draw(void)
{
}


/*=============================================================================
/*		End of File
=============================================================================*/