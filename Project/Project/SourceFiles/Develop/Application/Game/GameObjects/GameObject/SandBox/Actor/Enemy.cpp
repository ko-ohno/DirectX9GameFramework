/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[Enemy.cpp] 敵ゲームオブジェクト
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：敵ゲームオブジェクト
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../../../../StdAfx.h"
#include "Enemy.h"
#include "../../../Component/AIComponent/EnemyAIComponent.h"
#include "../../../Component/MoveComponent/EnemyMoveComponent.h"
#include "../../../../SandBoxManager/EnemieManager.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
Enemy::Enemy(Game* game)
	: Actor(game)
	, enemy_ai_(nullptr)
	, enemy_move_(nullptr)
	, position_start_(0.f, 0.f, 0.f)
	, angle_yaw_(0.f)
	, angle_pitch_(0.f)
	, angle_roll_(0.f)
	, move_vector_length_(1.f)
	, move_action_magnitude_(1.f)
	, max_execute_time_(1.f)
{
	// マネージャのリストにアドレスを追加
	game->GetEnemieManager()->AddEnemyGameObjectAddress(this);
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
Enemy::~Enemy(void)
{
	// マネージャのリストにアドレスを削除
	game_->GetEnemieManager()->RemoveEnemyGameObjectAddress(this);
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool Enemy::Init(void)
{
	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void Enemy::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* ゲームオブジェクトの入力処理
-----------------------------------------------------------------------------*/
void Enemy::InputGameObject(void)
{
}

/*-----------------------------------------------------------------------------
/* overrideで自分自身を更新
-----------------------------------------------------------------------------*/
void Enemy::UpdateGameObject(float deltaTime)
{
	UNREFERENCED_PARAMETER(deltaTime);
}

/*-----------------------------------------------------------------------------
/* 自身の状態の設定
-----------------------------------------------------------------------------*/
void Enemy::SetEnemyState(EnemyState enemyState)
{
	if (enemy_ai_ == nullptr) { return; }
	if (enemy_move_ == nullptr) { return; }

	enemy_ai_->SetEnemyState(enemyState);
	enemy_move_->SetEnemyState(enemyState);
}

/*-----------------------------------------------------------------------------
/* 自身の状態の取得
-----------------------------------------------------------------------------*/
EnemyState Enemy::GetEnemyState(void)
{
	if (enemy_ai_ == nullptr) { return EnemyState::None; }
	if (enemy_move_ == nullptr) { return EnemyState::None;; }

	return enemy_ai_->GetEnemyState();
}

/*=============================================================================
/*		End of File
=============================================================================*/