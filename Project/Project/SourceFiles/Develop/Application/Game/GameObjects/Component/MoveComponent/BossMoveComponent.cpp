/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[BossMoveComponent.cpp] ボスの移動コンポーネント
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：ボスの移動コンポーネント
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../../../StdAfx.h"
#include "BossMoveComponent.h"
#include "../ColliderComponent/OBBColliderComponent.h"
#include "../RendererComponent/GizmoRendererComponent/BoxGizmoRendererComponent.h"
#include "../../../Input/InputCheck.h"
#include "../../../../ImGui/ImGuiManager.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
BossMoveComponent::BossMoveComponent(GameObject* owner, int updateOrder)
	: MoveComponent(owner, updateOrder)
	, move_speed_(10.f)
{
	this->Init();
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
BossMoveComponent::~BossMoveComponent(void)
{
	this->Uninit();
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool BossMoveComponent::Init(void)
{
	// ボスのサンドボックスを初期化
	{
		player_sandbox_ = NEW OBBColliderComponent(owner_);
		player_sandbox_->SetDirLength(5.f, AxisType::X);
		player_sandbox_->SetDirLength(3.f, AxisType::Y);
	}

	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void BossMoveComponent::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* 入力処理
-----------------------------------------------------------------------------*/
void BossMoveComponent::Input(void)
{
}

/*-----------------------------------------------------------------------------
/*　更新処理
-----------------------------------------------------------------------------*/
void BossMoveComponent::Update(float deltaTime)
{
	// 線形球面保管を行うフラグをONに
	{
		owner_transform_->IsSetExecuteSlerp(true);
	}


}

/*-----------------------------------------------------------------------------
/*　移動の状態更新処理
-----------------------------------------------------------------------------*/
void BossMoveComponent::UpdateMovementState(Vector2& padThumb)
{

}

/*=============================================================================
/*		End of File
=============================================================================*/