/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[BlasterComponent.cpp] 光線銃コンポーネント
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：光線銃コンポーネント
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../../../StdAfx.h"
#include "BlasterComponent.h"
#include "../../GameObject.h"
#include "../../Component/RendererComponent/EffectRendererComponent.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
BlasterComponent::BlasterComponent(GameObject* owner, int updateOrder)
	: WeaponComponent(owner, updateOrder)
	, muzzle_flash_(nullptr)
{
	muzzle_flash_ = NEW EffectRendererComponent(owner);
	muzzle_flash_->SetEffect(EffectType::MuzzluFrashGreen);
	// 所有者からの影響を無効に
	muzzle_flash_->SetOwnerTransfromOrder(false);
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
BlasterComponent::~BlasterComponent(void)
{
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool BlasterComponent::Init(void)
{
	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void BlasterComponent::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* 入力処理
-----------------------------------------------------------------------------*/
void BlasterComponent::Input(void)
{
}

/*-----------------------------------------------------------------------------
/*　更新処理
-----------------------------------------------------------------------------*/
void BlasterComponent::Update(float deltaTime)
{
	UNREFERENCED_PARAMETER(deltaTime);
	//static float time = 0;
	//time += deltaTime;
	//if (time >= 5.f)
	//{
	//	muzzle_flash_->SetEffect(EffectType::MuzzluFrashBlue);
	//}
}

/*-----------------------------------------------------------------------------
/*　発射処理
-----------------------------------------------------------------------------*/
void BlasterComponent::Fire(void)
{
	muzzle_flash_->Play(position_);
	muzzle_flash_->SetRotationMatrix(*owner_->GetTransform()->GetRotationMatrix());
}

/*=============================================================================
/*		End of File
=============================================================================*/