/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[EnemieManager.cpp] エネミー管理クラス
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：エネミー管理クラス
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../StdAfx.h"
#include "EnemieManager.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
EnemieManager::EnemieManager(Game* game)
	: game_(game)
{
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
EnemieManager::~EnemieManager(void)
{
}

/*-----------------------------------------------------------------------------
/* ファクトリメソッド
-----------------------------------------------------------------------------*/
EnemieManager* EnemieManager::Create(Game* game)
{
	return NEW EnemieManager(game);
}

/*-----------------------------------------------------------------------------
/* 起動処理
-----------------------------------------------------------------------------*/
bool EnemieManager::StartUp(void)
{
	//自身の初期化
	const bool enemie_manager_init = this->Init();
	if (enemie_manager_init == false)
	{
		assert(!"EnemieManager::StartUp()：エネミーマネージャの初期化に失敗しました。");
		return false;
	}
	return true;
}

/*-----------------------------------------------------------------------------
/* 停止処理
-----------------------------------------------------------------------------*/
void EnemieManager::Shutdown(void)
{
	this->Uninit();
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool EnemieManager::Init(void)
{
	//自身の初期化
	{
		enemy_list_.clear();
	}
	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void EnemieManager::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* エネミーゲームオブジェクトのアドレスの追加処理
-----------------------------------------------------------------------------*/
void EnemieManager::AddEnemyGameObjectAddress(Enemy* enemy)
{
	enemy_list_.emplace_back(enemy);
}

/*-----------------------------------------------------------------------------
/* エネミーゲームオブジェクトのアドレスの削除処理
-----------------------------------------------------------------------------*/
void EnemieManager::RemoveEnemyGameObjectAddress(Enemy* enemy)
{
	auto iter = std::find(enemy_list_.begin() //範囲0〜
						 , enemy_list_.end()  //範囲最大まで
						 , enemy);			   //探す対象

	if (iter != enemy_list_.end())
	{
		enemy_list_.erase(iter);
	}
}

/*-----------------------------------------------------------------------------
/* エネミーゲームオブジェクトのアドレスを検索処理
-----------------------------------------------------------------------------*/
Enemy* EnemieManager::FindEnemyGameObjectAddress(Enemy* enemy)
{
	auto iter = std::find(enemy_list_.begin() //範囲0〜
						 , enemy_list_.end()  //範囲最大まで
						 , enemy);			   //探す対象

	// 見つかった場合
	if (iter != enemy_list_.end())
	{
		// コンテナの中のインデックスを取得
		const int iter_index = std::distance(enemy_list_.begin(), iter);
		return enemy_list_.at(iter_index);
	}

	// 見つからなかった場合
	assert(!"EnemieManager::FindEnemyGameObjectAddress():エネミーが見つかりませんでした！");
	return nullptr;
}

/*=============================================================================
/*		End of File
=============================================================================*/