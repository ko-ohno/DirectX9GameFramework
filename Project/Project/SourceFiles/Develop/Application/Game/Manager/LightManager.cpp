/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[LightManager.cpp] ライト管理クラス
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：ライト管理クラス
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../StdAfx.h"
#include "LightManager.h"
#include "../Resource/Light/DirectionalLight.h"

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
LightManager::LightManager(Game* game)
    : game_(game)
{
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
LightManager::~LightManager(void)
{
}

/*-----------------------------------------------------------------------------
/* ファクトリメソッド
-----------------------------------------------------------------------------*/
LightManager* LightManager::Create(Game* game)
{
    return NEW LightManager(game);
}

/*-----------------------------------------------------------------------------
/* 起動処理
-----------------------------------------------------------------------------*/
bool LightManager::StartUp(void)
{
	//自身の初期化
	const bool light_manager_init = this->Init();
	if (light_manager_init == false)
	{
		return false;
	}

    return true;
}

/*-----------------------------------------------------------------------------
/* 停止処理
-----------------------------------------------------------------------------*/
void LightManager::ShutDown(void)
{
	this->Uninit();
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool LightManager::Init(void)
{
	//ライトの読み込み
	{
		this->AddLight(NEW DirectionalLight(this));
	}
    return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void LightManager::Uninit(void)
{
	while (!light_list_.empty())
	{
		delete light_list_.back();
	}
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void LightManager::AddLight(Light* light)
{
	light_list_.emplace_back(light);
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void LightManager::RemoveLight(Light* light)
{
	auto iter = std::find(light_list_.begin()	//範囲0〜
						 , light_list_.end()	//範囲最大まで
						 , light);				//探す対象

	if (iter != light_list_.end())
	{
		light_list_.erase(iter);
	}
}

/*=============================================================================
/*		End of File
=============================================================================*/