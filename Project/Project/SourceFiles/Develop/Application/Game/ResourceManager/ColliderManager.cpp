/*=============================================================================
/*-----------------------------------------------------------------------------
/*	[ColliderManager.cpp] コライダ管理クラス
/*	Author：Kousuke,Ohno.
/*-----------------------------------------------------------------------------
/*	説明：コライダ管理クラス
=============================================================================*/

/*--- インクルードファイル ---*/
#include "../../../StdAfx.h"
#include "ColliderManager.h"

//エフェクトの名前リスト
const char* ColliderManager::ColliderTypeNames[static_cast<int>(ColiiderType::Max)] = {
	"Circle"
	, "Rectangle"
	, "Sphere"
	, "OBB"
};

/*-----------------------------------------------------------------------------
/* コンストラクタ
-----------------------------------------------------------------------------*/
ColliderManager::ColliderManager(Game* game)
	: game_(game)
{
}

/*-----------------------------------------------------------------------------
/* デストラクタ
-----------------------------------------------------------------------------*/
ColliderManager::~ColliderManager(void)
{
}

/*-----------------------------------------------------------------------------
/* ファクトリメソッド
-----------------------------------------------------------------------------*/
ColliderManager* ColliderManager::Create(Game* game)
{
	return NEW ColliderManager(game);
}

/*-----------------------------------------------------------------------------
/* 起動処理
-----------------------------------------------------------------------------*/
bool ColliderManager::StartUp(void)
{
	//自身の初期化
	const bool collider_manager_init = this->Init();
	if (collider_manager_init == false)
	{
		assert(!"ColliderManager::StartUp()：コライダマネージャの初期化に失敗しました。");
		return false;
	}
	return true;
}

/*-----------------------------------------------------------------------------
/* 停止処理
-----------------------------------------------------------------------------*/
void ColliderManager::Shutdown(void)
{
	this->Uninit();
}

/*-----------------------------------------------------------------------------
/* 初期化処理
-----------------------------------------------------------------------------*/
bool ColliderManager::Init(void)
{
	//自身の初期化
	{
		collider_list_.clear();
	}
	return true;
}

/*-----------------------------------------------------------------------------
/* 終了化処理
-----------------------------------------------------------------------------*/
void ColliderManager::Uninit(void)
{
}

/*-----------------------------------------------------------------------------
/* コライダコンポーネントの追加処理
-----------------------------------------------------------------------------*/
void ColliderManager::AddColliderComponentAddress(ColliderComponent* colliderComponent)
{
	collider_list_.emplace_back(colliderComponent);
}

/*-----------------------------------------------------------------------------
/* コライダコンポーネントの削除処理
-----------------------------------------------------------------------------*/
void ColliderManager::RemoveColliderComponentAddress(ColliderComponent* colliderComponent)
{
	auto iter = std::find(collider_list_.begin() //範囲0〜
						, collider_list_.end()	 //範囲最大まで
						, colliderComponent);			 //探す対象

	if (iter != collider_list_.end())
	{
		collider_list_.erase(iter);
	}
}

/*=============================================================================
/*		End of File
=============================================================================*/